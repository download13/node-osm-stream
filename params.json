{"name":"node-osm-stream","tagline":" Fast and flexible NodeJS-based streamable parser for OpenStreetMap (.osm) files powered by node-expat - @sogko","body":"# node-osm-stream\r\n\r\n## Overview\r\nA fast and flexible NodeJS-based streamable parser for OpenStreetMap (.osm) files.\r\n\r\nBoth incoming and outgoing streams available for piping from/to other streams.\r\n\r\n*Powered by  [node-expat](https://github.com/node-xmpp/node-expat) for blazing fast parsing.*\r\n\r\n### Table of Content\r\n* [Quick Start](#quick-start)\r\n  * [Install](#install)\r\n  * [Basic example](#example-reading-from-a-local-osm-file)\r\n  * [More examples](#more-examples)\r\n* [API](#api)\r\n  * [Class: OSMStream](#class-osmstream)\r\n  * [Methods](#methods)\r\n  * [Events](#events)\r\n    * [Events: 'node', 'way', 'relation'](#events-node-way-relation)\r\n    * [Event:'writeable'](#event-writeable)\r\n    * [Event:'flush'](#event-flush)\r\n    * [Events inherited from stream.Transform](#events-inherited-from-streamtransform)\r\n* [Test](#test)\r\n* [Known Issues](#known-issues)\r\n* [Credits](#credits)\r\n* [Links](#links)\r\n* [License](#license)\r\n\r\n----\r\n\r\n## Quick Start\r\n### Install\r\n````\r\nnpm install node-osm-stream\r\n````\r\nNo fuss, no lints\r\n\r\n### Example: Reading from a local .osm file\r\n````\r\nvar fs = require('fs');\r\nvar OSMStream = require('node-osm-stream');\r\nvar parser = OSMStream();\r\n\r\n// open a local .osm filestream\r\nfs.createReadStream('./path/to/file.osm')\r\n\t.pipe(parser);\r\n\r\nparser.on('node', function(node, callback){\r\n\t// Modify current node object as you wish\r\n\t// and pass it back to the callback.\r\n\t// Or pass 'null' or 'false' to prevent the object being \r\n\t// written to outgoing stream\r\n\tconsole.log(node);\r\n\tcallback(node);\r\n});\r\n\r\nparser.on('way', function(way, callback){ callback(way); });\r\n\r\nparser.on('relation', function(way, callback){ callback(relation); });\r\n````\r\n\r\nEasy-peasy, lemon-squeezy.\r\n\r\n\r\n### More examples\r\nMore advanced examples are available in the ```./examples``` folder\r\n\r\n#### Stream and format outgoing data to console (process.stdout)\r\nSource: [/examples/stream-to-stdout.js](https://github.com/sogko/node-osm-stream/blob/master/examples/stream-to-stdout.js)\r\n\r\nTo run example:\r\n````\r\nnode ./examples/stream-to-stdout.js\r\n````\r\n\r\n#### Writing to a JSON file using Writeable steam (fs.createWriteStream)\r\nSource: [/examples/write-to-json.js](https://github.com/sogko/node-osm-stream/blob/master/examples/write-to-json.js)\r\n\r\nTo run example:\r\n````\r\nnode ./examples/write-to-json.js\r\n````\r\n\r\n## API\r\n\r\n### Class: OSMStream \r\nClass inherited from [stream.Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform)\r\n\r\n### Methods\r\nAll methods are inherited from [stream.Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform)\r\n\r\n### Events\r\n#### Events: 'node', 'way', 'relation'\r\nWhen an object (node/way/relation) from the .osm file has been parsed fully with its attributes and children (if any) ready, it will emit a 'node' or 'way' or 'relation' event, depending on the object type.\r\n\r\nYou can modify the outgoing data and passing it back to the callback.\r\nOr you can prevent the data from being passed downstream by passing back a *null* or *false*\r\n\r\nIt's important to note that since this is a streaming parser, any other objects (ways/relations) that may have referenced a skipped node may still hold its reference. It is up to the implementation to remove its references. \r\n\r\nTo see an example of a possible implementation, take a look at ```` /examples/write-to-json.js````\r\n\r\nNote: If this event was registered, the callback must be passed back.\r\n\r\n````\r\nparser.on('node', function(node, callback) {\r\n  // modify the node object as necessary and pass back to callback\r\n  // or send a null or false to prevent it from going downstream\r\n  callback(node);\r\n});\r\n\r\nparser.on('way', function(way, callback) {\r\n  ...\r\n  callback(way);\r\n});\r\nparser.on('relation', function(relation, callback) {\r\n  ...\r\n  callback(relation);\r\n});\r\n````\r\n\r\n#### Event: 'writable'\r\nWhen a chunk of data is ready to be written to the outgoing stream, it will emit a 'writeable' event.\r\n\r\nYou can modify the outgoing data and passing it back to the callback.\r\nOr you can prevent the data from being passed downstream by passing back a *null* or *false*\r\n\r\nNote: If this event was registered, the callback must be passed back.\r\n\r\n````\r\nparser.on('writeable', function(data, callback) {\r\n  // there is some data to be passed to outgoing stream\r\n  // modify 'data' as needed\r\n  callback(data);\r\n});\r\n````\r\n\r\n#### Event: 'flush'\r\nAfter all the written data has been consumed through the outgoing stream, it will emit a 'flush' event.\r\nThis will happened before the 'end' event is sent to signal the end of the readable side.\r\n\r\nYou can choose to pass in as much data as needed by passing it through the callback.\r\nAny data passed back will be written to the outgoing stream before the 'end' event is emitted.\r\n\r\nNote: If this event was registered, the callback must be passed back.\r\n\r\n````\r\nparser.on('flush', function(callback) {\r\n  var last_data = 'This is the last string sent to the outgoing stream';\r\n  callback(last_data);\r\n});\r\n````\r\n\r\n#### Events inherited from stream.Transform\r\nIn addition to the events above, the following are events inherited from stream.Transform class.\r\nPlease refer to the offical documentation for more info: [NodeJS API Documentation: stream.Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform)\r\n\r\n* Event: 'readable'\r\n* Event: 'data'\r\n* Event: 'end'\r\n* Event: 'close'\r\n* Event: 'error'\r\n* Event: 'drain'\r\n* Event: 'finish'\r\n* Event: 'pipe'\r\n* Event: 'unpipe'\r\n\r\n\r\n## Test\r\n````\r\nnpm test\r\n`````\r\n\r\n## Known Issues\r\n\r\n\r\n\r\n## Credits\r\n\r\n* [Hafiz Ismail](https://github.com/sogko) \r\n* [node-expat](https://github.com/node-xmpp/node-expat)\r\n\r\n## Links\r\n* [twitter.com/sogko](https://twitter.com/sogko)\r\n* [github.com/sogko](https://github.com/sogko)\r\n* [medium.com/@sogko](https://medium.com/@sogko)\r\n\r\n## License\r\nCopyright (c) 2014 Hafiz Ismail. This software is licensed under the [MIT License](https://github.com/sogko/node-osm-stream/raw/master/LICENSE).","google":"UA-52623686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}